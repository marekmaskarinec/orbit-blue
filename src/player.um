
import (
	"anim.um"
	"atlas.um"
	"ent.um"
	"input.um"
	"rect.um"
	"th.um"

	"glob.um"
	"res.um"
)

const TAG = "player.um"

const (
	rotSpeed = 0.15
	maxSpeed = 0.15
	minSpeed = 0.01
	accelRate = 0.04
)

var (
	animMoving, animTakingDamage: anim.Anim
)

type Player* = struct {
	e: ent.Ent
	
	speed: real32
}

fn init*() {
	animMoving = anim.mk(
		atlas.mk(res.images["Moon_Ship_Moving_MTRX"], { 4, 2 }),
		glob.ANIM_FPS,
		0, 5
	)

	animTakingDamage = anim.mk(
		atlas.mk(res.images["Moon_Ship_TakingDamage_MTRX"], { 4, 1 }),
		glob.ANIM_FPS,
		0, 4
	)
}

fn (this: ^Player) mk*() {
	this.e = ent.mk(res.images["Moon_Ship_Idle"])
	this.e.t.o = this.e.r.getDims().divf(2)
	this.speed = minSpeed
}

fn (this: ^Player) update*() {
	animMoving.animate(th.time)
	animTakingDamage.animate(th.time)

	if input.isPressed(input.key_left) {
		this.e.t.r -= rotSpeed * th.delta
	}

	if input.isPressed(input.key_right) {
		this.e.t.r += rotSpeed * th.delta
	}

	if input.isPressed(input.key_down) {
		this.speed -= this.speed * accelRate
		if this.speed < minSpeed {
			this.speed = minSpeed
		}

		this.e.i = res.images["Moon_Ship_Idle"]
	} else {
		this.speed += this.speed * accelRate
		if this.speed > maxSpeed {
			this.speed = maxSpeed
		}

		this.e.i = res.images["Moon_Ship_Moving_MTRX"]
	}

	this.e.t.p = this.e.t.p.add(
		th.Vf2{ this.speed * th.delta, 0 }.rotated({}, this.e.t.r)
	)
}

fn (this: ^Player) draw*() {
	this.e.draw()
}
