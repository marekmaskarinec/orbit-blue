
import (
	"anim.um"
	"atlas.um"
	"audio.um"
	"ent.um"
	"font.um"
	"image.um"
	"placeholders.um"
	"rect.um"
	"std.um"
	"th.um"
	"ui.um"

	"coulau/logs.um"
	gfx_images = "../gfx/images.um"

	"glob.um"
)

const TAG = "res.um"

type Image* = struct {
	img: image.Image
	scale: th.Vf2
}

var (
	images*: map[str]Image
	atlases*: map[str]atlas.Atlas
	animations*: map[str]anim.Anim

	ftreg*, ftmono*: font.Font
)

fn setEnt*(e: ^ent.Ent, image: str): anim.Anim {
	if validkey(animations, image) {
		anim := animations[image]
		img := images[gfx_images.atlases[gfx_images.animations[image].atlas].image]
		e.i = img.img
		e.t.s = img.scale
		e.r = rect.fromVf2({}, anim.atl.cs)

		return anim
	}

	e.i = images[image].img
	e.t.s = images[image].scale
	e.r = rect.fromVf2({}, e.i.getDims())

	return {}
}

fn init*() {
	gfx_images.init()

	for k,v in gfx_images.images {
		printf("IMG: %s\n", k)

		images[k] = {
			image.load(v.path),
			th.vf2f(v.scale)
		}
	}

	for k,v in gfx_images.atlases {
		printf("ATL: %s\n", k)

		if !validkey(images, v.image) {
			error(sprintf("Atlas %s uses invalid image %s", k, v.image))
		}

		atlases[k] = atlas.mk(images[v.image].img, v.dimensions)
	}

	for k,v in gfx_images.animations {
		printf("ANM: %s\n", k)

		if !validkey(atlases, v.atlas) {
			error(sprintf("Animation %s uses invalid image %s", k, v.atlas))
		}

		animations[k] = anim.mk(
			atlases[v.atlas],
			v.fpsCount > 0 ? v.fpsCount : glob.ANIM_FPS,
			0, v.frameCount
		)
	}
}

fn getUiStyle*(): ui.Style {
	return {
		ft: ftreg,
		ftScale: 4,
		ftColor: th.black,

		posBox: {
			img: placeholders.button,
			outer: { 0, 0, 5, 5 },
			inner: { 2, 2, 1, 1 },
			scale: 0.25,
			color: th.white },
		negBox: {
			img: placeholders.button,
			outer: { 5, 0, 5, 5 },
			inner: { 2, 2, 1, 1 },
			scale: 0.25,
			color: th.white },
		containerBox: {
			color: 0x888888ff } }
}
