
import (
	"atlas.um"
	"canvas.um"
	"ent.um"
	"rect.um"
	"th.um"
	"tilemap.um"
	"window.um"

	"coulau/logs.um"

	"res.um"
	"util.um"
)

const TAG = "stage.um"

type (
	Model* = interface {
		mk(st: ^Stage)
		update()
		draw()
		getEnt(): ^ent.Ent
	}

	Stage* = struct {
		walls: tilemap.Tilemap
		brwalls: tilemap.Tilemap
		models: []Model

		modelUpdateIdx: int
	}
)

fn init*() {
}

fn (this: ^Stage) mk*() {
	this.walls = tilemap.mk(
		util.genRandomTilemap(80, 80),
		80,
		atlas.mk(res.images["Moon_Stone"], { 1, 1 })
	)
	this.walls.collMask = { true }
	this.walls.pos = { -200, -200 }
	this.modelUpdateIdx = -1
}

fn (this: ^Stage) deleteCurrentModel*() {
	if this.modelUpdateIdx < 0 {
		error("deleteCurrentModel called out of the model update loop")
	}

	idx := this.modelUpdateIdx
	this.modelUpdateIdx++

	if len(this.models) == 1 {
		this.models = {}
		return
	}

	this.models[idx] = this.models[len(this.models) -1]
	this.models = slice(this.models, 0, len(this.models) - 1)
}

fn (this: ^Stage) spawn*(m: Model) {
	this.models = append(this.models, m)
}

fn (this: ^Stage) update*() {
	this.modelUpdateIdx = 0
	for _:=0; this.modelUpdateIdx < len(this.models); this.modelUpdateIdx++ {
		this.models[this.modelUpdateIdx].update()
	}
	this.modelUpdateIdx = -1
}

fn (this: ^Stage) draw*() {
	for i in this.models {
		this.models[i].draw()
	}

	this.walls.draw()
}

